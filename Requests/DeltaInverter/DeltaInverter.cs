// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Requests.DeltaInverter;
//
//    var deltaInverter = DeltaInverter.FromJson(jsonString);

namespace Requests.DeltaInverter
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class DeltaInverter
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }

        [JsonProperty("item")]
        public Item Item { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("time")]
        public DateTimeOffset Time { get; set; }

        [JsonProperty("Photovoltaic")]
        public Dictionary<string, long> Photovoltaic { get; set; }

        [JsonProperty("Inverter")]
        public Inverter Inverter { get; set; }

        [JsonProperty("TOU")]
        public Tou Tou { get; set; }

        [JsonProperty("BMS")]
        public Bms Bms { get; set; }
    }

    public partial class Bms
    {
        [JsonProperty("BackupSoC")]
        public long BackupSoC { get; set; }

        [JsonProperty("BAT")]
        public Dictionary<string, long>[] Bat { get; set; }
    }

    public partial class Inverter
    {
        [JsonProperty("AggPVPower")]
        public long AggPvPower { get; set; }

        [JsonProperty("loadP")]
        public long LoadP { get; set; }

        [JsonProperty("pvTodayE")]
        public long PvTodayE { get; set; }

        [JsonProperty("pvInfoSumE")]
        public long PvInfoSumE { get; set; }

        [JsonProperty("ComsumpEnergy")]
        public long ComsumpEnergy { get; set; }

        [JsonProperty("GridBuyEnergy")]
        public long GridBuyEnergy { get; set; }
    }

    public partial class Tou
    {
        [JsonProperty("pcsOpMode")]
        public long PcsOpMode { get; set; }

        [JsonProperty("chargeStart")]
        public long ChargeStart { get; set; }

        [JsonProperty("chargeEnd")]
        public long ChargeEnd { get; set; }

        [JsonProperty("dischargeStart")]
        public long DischargeStart { get; set; }

        [JsonProperty("dischargeEnd")]
        public long DischargeEnd { get; set; }
    }

    public partial class DeltaInverter
    {
        public static DeltaInverter FromJson(string json) => JsonConvert.DeserializeObject<DeltaInverter>(json, Requests.DeltaInverter.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DeltaInverter self) => JsonConvert.SerializeObject(self, Requests.DeltaInverter.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
